// vire/plugin.cc - Implementation of Vire plugin
//
// Copyright (c) 2015 by Fran√ßois Mauger <mauger@lpccaen.in2p3.fr>
//
// This file is part of Vire.
//
// Vire is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Vire is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Vire. If not, see <http://www.gnu.org/licenses/>.

// Ourselves:
#include <vire/plugin.h>

// Standard Library:
#include <iostream>
#include <fstream>
#include <cstdlib>

// Third Party:
// - Boost:
#include <boost/filesystem.hpp>
// - Bayeux/datatools:
#include <datatools/exception.h>
#include <datatools/logger.h>

// This Project:
#include <vire/version.h>

namespace {

  //! Return the path to the root plugin directory
  std::string get_plugin_root(bool overriden_env) {
    static const boost::filesystem::path install_root = "@CMAKE_INSTALL_PREFIX@";
    boost::filesystem::path install_plugin_root =
      install_root / "@CMAKE_INSTALL_LIBDIR@" / "@Vire_PLUGINLIBDIR@";
    // Not sure to maintain this in the future:
    if(overriden_env) {
      if (std::getenv("VIRE_PLUGIN_LIB_DIR")) {
        //DT_LOG_WARNING(datatools::logger::PRIO_WARNING,
        //               "Using VIRE_PLUGIN_DIR overriding environ variable...");
        install_plugin_root = std::string(std::getenv("VIRE_PLUGIN_LIB_DIR"));
      }
    }
    return install_plugin_root.string();
  }

} // namespace

namespace vire {

  std::string get_plugin_dir(bool overriden_env) {
    return get_plugin_root(overriden_env);
  }

  std::string get_plugin(const std::string& rname, bool overriden_env)
  {
    DT_THROW_IF(rname[0] == '/', std::logic_error, "invalid plugin name");

    std::string fullpath(get_plugin_root(overriden_env) + "/" + rname);
    std::ifstream check(fullpath.c_str());
    DT_THROW_IF(!check.good(),
                std::runtime_error,
                "Unreadable plugin '" << fullpath << "'")
      return fullpath;
  }

} // namespace vire
