// vire/mos/vire_mos.cc - Implementation of Vire MOS init/fini function
//
// Copyright (c) 2015 by Francois Mauger <mauger@lpccaen.in2p3.fr>
//
// This file is part of Vire.
//
// Vire is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Vire is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Vire. If not, see <http://www.gnu.org/licenses/>.

// Ourselves:
#include <vire/mos/vire_mos.h>

// Standard library
#include <iostream>

// Third party:
// - Bayeux:
#include <bayeux/bayeux.h>
// - Bayeux/datatools
#include <datatools/exception.h>
#include <datatools/kernel.h>
#include <datatools/library_info.h>

// This project:
#include <vire/resource_files.h>
#include <vire/mos/version.h>
#include <vire/vire.h>

namespace {

  static bool _vireMosInit = false;

  void vire_mos_initialize_impl()
  {
    DT_THROW_IF(!datatools::kernel::is_instantiated(),
                std::runtime_error,
                "The Bayeux/datatools kernel is not instantiated !");
    datatools::kernel & krnl = datatools::kernel::instance();

    // Populate the library info register:
    if (krnl.has_library_info_register()) {
      // Registration of the Vire MOS component in the Bayeux's kernel library info register:
      datatools::library_info & lib_info_reg
        = krnl.grab_library_info_register();

      // Bundled submodules:
      {
        // Vire MOS itself:
        DT_THROW_IF (lib_info_reg.has("viremos"),
                     std::logic_error,
                     "Vire MOS is already registered !");
        datatools::properties & viremos_lib_infos
          = lib_info_reg.registration("viremos",
                                      "Vire MOS provides a real-time software environment for the control,"
                                      "monitoring and running of an experiment.",
                                      vire::mos::version::get_version()
                                      );

        // Register the Vire MOS resource path in the Bayeux's datatools kernel:
        viremos_lib_infos.store_string(datatools::library_info::keys::install_resource_dir(),
                                       vire::get_plugin_resource_files_dir("Vire_MOS", false)
                                       );

        // If the 'VIRE_MOS_RESOURCE_DIR' environment variable is set, it will supersede
        // the official registered resource path above through the 'datatools::fetch_path_with_env'
        // function:
        viremos_lib_infos.store_string(datatools::library_info::keys::env_resource_dir(),
                                       "VIRE_MOS_RESOURCE_DIR"
                                       );

      }
    }
    return;
  }

  void vire_mos_terminate_impl()
  {
    if (datatools::kernel::is_instantiated()) {
      datatools::kernel & krnl = datatools::kernel::instance();
      if (krnl.has_library_info_register()) {
        // Access to the datatools kernel library info register:
        datatools::library_info & lib_info_reg = krnl.grab_library_info_register();

        // Unregistration of the registered Vire MOS library from the Bayeux's kernel library info register:
        if (lib_info_reg.has("viremos")) {
          lib_info_reg.unregistration("viremos");
        }
      }
    }
    return;
  }

}

namespace vire {
  namespace mos {

    bool is_initialized()
    {
      return ::_vireMosInit;
    }

    void initialize(int argc_, char * argv_[], uint32_t flags_)
    {
      if (! ::_vireMosInit) {
        // Initialization code from Vire MOS itself:
        ::vire::initialize(argc_,argv_, flags_);
        vire_mos_initialize_impl();
        ::_vireMosInit = true;
      } else {
        DT_THROW_IF(true, std::logic_error,
                    "Attempt to initialize the already initialized Vire MOS library!");
      }
      return;
    }

    void terminate()
    {
      if (::_vireMosInit) {
        // Termination code for Vire MOS:
        ::_vireMosInit = false;
        vire_mos_terminate_impl();
        ::vire::terminate();
      } else {
        DT_THROW_IF(true, std::logic_error,
                    "Attempt to terminate the already terminated Vire MOS library!");
      }
      return;
    }

  } // namespace mos
} // namespace vire
