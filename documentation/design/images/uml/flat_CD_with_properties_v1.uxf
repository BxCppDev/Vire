<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="13.3">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=12
fontfamily=Monospaced //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>8</zoom_level>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>0</y>
      <w>376</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>*boost::posix_time::time_period*
--
--
+begin() : boost::posix_time::ptime
+last() : boost::posix_time::ptime
+end() : boost::posix_time::ptime
+length() : boost::posix_time::time_duration
+is_null() : bool
+contains(boost::posix_time::ptime) : bool
+contains(boost::posix_time::time_period) : bool
+intersects(boost::posix_time::time_period) : bool
+intersection(boost::posix_time::time_period) : boost::posix_time::time_period
+merge(boost::posix_time::time_period) : boost::posix_time::time_period
+span(boost::posix_time::time_period) : boost::posix_time::time_period
--
Utility function:
  vire::time::invalid_time_interval() : const boost::posix_time::time_period 


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>200</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>*vire::device::device*

--
-id   : int32_t
-path : std::string
--
resources() : std::set&lt;int32_t&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>1216</y>
      <w>256</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::configuration*
--
-id: int32_t
--
name             ()     : std::string
theme            ()     : std::string
keywords         ()     : std::string []
authorized_roles ()     : int32_t []
resources        ()     : resource_set []
get_resource     (id)   : resource ???
--
Responsibilities
-- Global or partial experiment config</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>288</x>
      <y>1216</y>
      <w>312</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::configuration_manager*
{unique in the kernel ???}
--
--
themes       ()      : std::string []
config_names (theme) : std::string []
get          (name)  : config
add          (config)
--
Responsibilities
-- Blessed configurations storage
Possible implementation
-- As Service associated with Device Configuration_Mgr_Dev
   Resources : 
      &lt;&lt;U&gt;&gt; Get (String : Name) : config
      &lt;&lt;X&gt;&gt; Add (Config)


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>400</x>
      <y>136</y>
      <w>136</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>*vire::user::user*
--
--
+get_uid() : int32_t
+get_name(): std::string
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>912</y>
      <w>248</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>/*vire::cmsserver::base_process*/
--
-sess : vire::cmsserver::session
--
/constructor(uid, gid, role, when)/
/resources() : resource_pool/
/status() : std::string/
/finish()   --  free session/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>576</y>
      <w>216</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::session_info*
--
-id   : int32_t -- auto
-uid  : int32_t
-gid  : int32_t
-role : int32_t
-when : boost::posix_time::time_period
-what : std::string
--
_-next_id() : int32_t_
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>248</x>
      <y>576</y>
      <w>216</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::session*
--
-id  : int32_t
-key : std::string ?

-functional_session : effective_session
-subsessions  : session []
-availables   : resource_pool
--
+finish()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>344</x>
      <y>800</y>
      <w>328</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::effective_session*
--
-resources : vire::cmsserver::resource_pool
--
+abstract exec(...)
--
Responsability :
-- Effective/functional side of the session (access to resources)
     =&gt; resources == functional resource_pool
     =&gt; use session key?
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>480</x>
      <y>584</y>
      <w>200</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::user_session*
--
-
--
enter(uid, as)
leave()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>288</x>
      <y>912</y>
      <w>224</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::user_service*
--
-
--
enter(uid, gid, role)
leave()
who_is_there() : uid
macro_exec(Script)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Note</type>
    <coordinates>
      <x>400</x>
      <y>0</y>
      <w>392</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>Date/time support
------------------------------
 
Provided by the Boost/date_time library

See : http://www.boost.org/doc/libs/1_55_0/doc/html/date_time/posix_time.html 

Classes:

- boost::posix_time::ptime
- boost::posix_time::time_duration
- boost::posix_time::time_period

bg=yellow

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Note</type>
    <coordinates>
      <x>560</x>
      <y>400</y>
      <w>328</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>
TODO : à introduire en fonction des besoins
       à confirmer 

Dans la relation session/sous-session: distribute/restore
      
 "restore"    Union (set) &amp; Somme (map)
 "distribute" Union (set) &amp; Diff (map)
 
Pour la semantique de type ensemble: 
 
 valeur min des limited = 1 (en dessous, sort de la map ?)
 "and" Inter (set) &amp; Min (map)  
 "or"  Union (set) &amp; Max (map)

bg=yellow

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>192</x>
      <y>208</y>
      <w>232</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>/*vire::resource::resource*/
--
--
get_id() : int32_t
get_path() : std::string
is_readable() : bool
is_writable() : bool
is_number_of_tokens_limited() : bool
get_max_number_of_tokens() : int
...</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>256</x>
      <y>400</y>
      <w>288</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::resource_pool*
--
-available_limited_tokens : std::map&lt;int32_t, std::size_t&gt;
-unlimited : std::set&lt;int32_t&gt;
--
+contains(rp : resource_pool) : bool 
TBD: special methods for distribute/restore
TBD: set semantic and/or
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Note</type>
    <coordinates>
      <x>480</x>
      <y>656</y>
      <w>336</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>Session creation = f (Id) :
  Availables             = Id.As.Scope_Set - Id.As.Functionnal_Set
  Func_Session.Resources = Id.As.Functionnal_Set
  Sub_Sessions           = []
 
Session invariant :
  Availables ==    Id.As.Scope_Set 
                 - Id.As.Functionnal_Set 
                 - Sub_Session [1].Id.As.Scope_Set 
                 - Sub_Session [2].Id.As.Scope_Set
                 - ...

bg=yellow

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>704</y>
      <w>304</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::session_key_manager*
{unique in the kernel}
--
--
get_root_session_key() : std::string
get_subsession_key(mother_key : int32_t) : int32_t
is_valid(key : int32_t) : bool
session_finished(key : int32_t()
--
Responsibilities
-- Key generator and validity check
Possible implementation
-- As static private properties of Session</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>440</x>
      <y>600</y>
      <w>56</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>24;24;40;24</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>520</x>
      <y>904</y>
      <w>296</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::user_service_factory*
{unique in the kernel}
--
-tag_ctor_registry 
--
new_service(service_tag, session) : user_service
--
Possible implementation
--  as static private properties of user_service
--  use the datatools::factory tools </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>240</x>
      <y>912</y>
      <w>64</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>24;24;48;24</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>1008</y>
      <w>224</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::user_reservation*
--
-reservation : session_info
-service_tag : std::string
-start_macro : std::string
-stop_macro  : std::string
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>248</x>
      <y>1008</y>
      <w>464</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::agenda*
--
-resources    : resource_pool
-sessions     : user_reservation []
-current_time : ptime
-next_event   : user_reservation  -- session to open or close
--
 
-get_currents()               : session_info []
-get_future()               : session_info []
-get_next_Slot(Role, Duration) : time_period
 
-reserve(who, as, what, duration, service_tag, macro)    : int32_t
-reserve(who, as, when, what, service_tag, macro)        : int32_t
-reserve(who, as, what, duration, at, fq, n, service_tag, macro) : int32_t
-cancel(id)
-release(id)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Note</type>
    <coordinates>
      <x>24</x>
      <y>288</y>
      <w>144</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>A resource identifier
is an integer

bg=yellow
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>544</x>
      <y>136</y>
      <w>160</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>*vire::user::group*
--
--
+get_gid() : int32_t
+get_name(): std::string
+has_uid(uid : int32_t) : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>16</x>
      <y>400</y>
      <w>224</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>*vire::cmsserver::kernel*
--
--
+get_setup_label(): std::string
+get_setup_version() : std::string
+get_setup_description() : std::string
+get_root_session() : session
+is_initialized() : bool
+initialize(params)
+reset()
+is_started() : bool
+start()
+stop()
+next_session_id(): int
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Note</type>
    <coordinates>
      <x>712</x>
      <y>168</y>
      <w>200</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>TBD from the resource manager:
extraction of local roles from devices

_User   (Device)               : Role_
_Expert (Device)               : Role_
_Expert (Device, Role_Tags []) : Role_
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Class</type>
    <coordinates>
      <x>432</x>
      <y>256</y>
      <w>368</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>*vire::resource::role*
--
--
+get_id() : int32_t
+get_allowed_users() : const std::set&lt;int32_t&gt;
+get_allowed_groups() : const std::set&lt;int32_t&gt;
+get_set_of_scope_resource_ids() : const std::set&lt;int32_t&gt;
+get_set_of_functional_resource_ids() : const std::set&lt;int32_t&gt;
+get_set_of_distributable_resource_ids() : const std::set&lt;int32_t&gt;
+is_valid() : bool 
# TBD: +get_set_of_hidden_resources_ids() : const std::set&lt;int32_t&gt;
--

</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
